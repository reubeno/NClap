NClap.CommandLineParserOptions.ServiceConfigurer.get -> NClap.ServiceConfigurer
NClap.CommandLineParserOptions.ServiceConfigurer.set -> void
NClap.CommandLineParserOptionsExtensions
NClap.Help.ArgumentHelpOptions.IncludeNamedArgumentValueSyntax.get -> bool
NClap.Help.ArgumentHelpOptions.IncludeNamedArgumentValueSyntax.set -> void
NClap.Metadata.ArgumentSetAttribute.ExpandLogo.get -> bool
NClap.Metadata.ArgumentSetAttribute.ExpandLogo.set -> void
NClap.Metadata.CommandGroup<TCommandType>.CommandGroup(NClap.Metadata.CommandGroupOptions options) -> void
NClap.Metadata.CommandGroup<TCommandType>.CommandGroup(NClap.Metadata.CommandGroupOptions options, TCommandType selection, object parentObject) -> void
NClap.Metadata.CommandGroupOptions
NClap.Metadata.CommandGroupOptions.DeepClone() -> NClap.Metadata.CommandGroupOptions
NClap.Parser.AttributeBasedArgumentDefinitionFactory
NClap.Repl.ILoopClient.PromptWithColor.get -> NClap.Utilities.ColoredString?
NClap.Repl.ILoopClient.PromptWithColor.set -> void
NClap.Repl.Loop.Loop(System.Type commandType, NClap.Repl.ILoopClient loopClient, NClap.Metadata.ArgumentSetAttribute argSetAttribute = null, NClap.Repl.LoopOptions options = null) -> void
NClap.Repl.Loop.Loop(System.Type commandType, NClap.Repl.LoopInputOutputParameters parameters = null, NClap.Metadata.ArgumentSetAttribute argSetAttribute = null, NClap.Repl.LoopOptions options = null) -> void
NClap.Repl.LoopOptions
NClap.Repl.LoopOptions.DeepClone() -> NClap.Repl.LoopOptions
NClap.Repl.LoopOptions.LoopOptions() -> void
NClap.Repl.LoopOptions.ParserOptions.get -> NClap.CommandLineParserOptions
NClap.Repl.LoopOptions.ParserOptions.set -> void
NClap.ServiceConfigurer
NClap.Types.ArgumentParseContext.ServiceConfigurer.get -> NClap.ServiceConfigurer
NClap.Types.ArgumentParseContext.ServiceConfigurer.set -> void
NClap.Types.IArgumentValue.GetAttributes<T>() -> System.Collections.Generic.IEnumerable<T>
static NClap.CommandLineParserOptionsExtensions.ConfigureServices(this NClap.Utilities.FluentBuilder<NClap.CommandLineParserOptions> builder, NClap.ServiceConfigurer configurer) -> NClap.Utilities.FluentBuilder<NClap.CommandLineParserOptions>
static NClap.CommandLineParserOptionsExtensions.Quiet(this NClap.Utilities.FluentBuilder<NClap.CommandLineParserOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.CommandLineParserOptions>
static NClap.CommandLineParserOptionsExtensions.TryParse<T>(this NClap.CommandLineParserOptions options, System.Collections.Generic.IEnumerable<string> arguments, out T result) -> bool
static NClap.CommandLineParserOptionsExtensions.With(this NClap.CommandLineParserOptions options) -> NClap.Utilities.FluentBuilder<NClap.CommandLineParserOptions>
static NClap.Help.ArgumentSetHelpOptionsExtensions.NoDescription(this NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions>
static NClap.Help.ArgumentSetHelpOptionsExtensions.NoEnumValues(this NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions>
static NClap.Help.ArgumentSetHelpOptionsExtensions.NoExamples(this NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions>
static NClap.Help.ArgumentSetHelpOptionsExtensions.NoLogo(this NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions>
static NClap.Help.ArgumentSetHelpOptionsExtensions.NoSyntaxSummary(this NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions> builder) -> NClap.Utilities.FluentBuilder<NClap.Help.ArgumentSetHelpOptions>
static NClap.Parser.AttributeBasedArgumentDefinitionFactory.AddToArgumentSet(NClap.Parser.ArgumentSetDefinition argSet, System.Type typeToReflectOn, object defaultValues = null, object fixedDestination = null, NClap.Parser.ArgumentDefinition containingArgument = null) -> void
static NClap.Parser.AttributeBasedArgumentDefinitionFactory.CreateArgumentSet(System.Type typeToReflectOn, NClap.Metadata.ArgumentSetAttribute attribute = null, object defaultValues = null, object fixedDestination = null) -> NClap.Parser.ArgumentSetDefinition
